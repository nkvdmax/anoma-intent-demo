// Base path for GH Pages
const BASE = window.__BASE__ || "/anoma-spa-ghpages/";

// --- Tiny client-side router (History API)
const routes = {

  "": {
    title: "Anoma ‚Äî –ì–æ–ª–æ–≤–Ω–∞",
    description: "–î–µ–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É Anoma Intent –∑ –º—É–ª—å—Ç–∏—Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏.",
    html: `
      <section>
        <h1>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ üëã</h1>
        <p>–¶–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ SPA-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –¥—Ä—É–∂–Ω—è –¥–æ GitHub Pages: —Ä–æ—É—Ç–∏–Ω–≥, —Ç–µ–º–Ω–∞ —Ç–µ–º–∞, –º–µ—Ç–∞–¥–∞–Ω—ñ –π PWA.</p>
        <div class="card">
          <h2>–©–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ?</h2>
          <ul>
            <li>–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –∑ History API</li>
            <li>–ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Ç–µ–º–Ω–∞/—Å–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞</li>
            <li>–î–∏–Ω–∞–º—ñ—á–Ω—ñ &lt;title&gt; —ñ meta description</li>
            <li>Open Graph / Twitter Cards / JSON-LD</li>
            <li>Service Worker —ñ –æ—Ñ–ª–∞–π–Ω-–∫–µ—à</li>
          </ul>
          <p class="theme-note">–ü–æ—Ä–∞–¥–∞: —Å–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–º–∏–∫–∞—á —Ç–µ–º–∏ —É –ø—Ä–∞–≤–æ–º—É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç—ñ.</p>
        </div>
      </section>`
  },

  "about": {
    title: "Anoma ‚Äî –ü—Ä–æ –Ω–∞—Å",
    description: "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç Anoma Intent App.",
    html: `
      <section>
        <h1>–ü—Ä–æ –Ω–∞—Å</h1>
        <p>–¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –º—É–ª—å—Ç–∏—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∏–π SPA-–ø—ñ–¥—Ö—ñ–¥ –Ω–∞ GitHub Pages.</p>
        <div class="card"><p>–ó–º—ñ–Ω—ñ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø—ñ–¥ —Å–≤—ñ–π –ø—Ä–æ–µ–∫—Ç.</p></div>
      </section>`
  },

  "demo": {
    title: "Anoma ‚Äî –î–µ–º–æ",
    description: "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π SPA.",
    html: `
      <section>
        <h1>–î–µ–º–æ</h1>
        <p>–¢—É—Ç –º–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤, –ø—Ä–∏–∫–ª–∞–¥–∏ —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤ —Ç–æ—â–æ.</p>
        <img src="https://picsum.photos/960/360" alt="–î–µ–º–æ-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" loading="lazy" decoding="async">
      </section>`
  },

  "privacy": {
    title: "Anoma ‚Äî –ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ",
    description: "–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ–ª—ñ—Ç–∏–∫–∏ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ.",
    html: `
      <section>
        <h1>–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ</h1>
        <p>–û–Ω–æ–≤—ñ—Ç—å —Ü–µ–π —Ç–µ–∫—Å—Ç –∑–≥—ñ–¥–Ω–æ –≤–∞—à–∏—Ö –≤–∏–º–æ–≥.</p>
      </section>`
  }
};

// Normalize pathname to a key
function pathToKey(pathname) {
  let path = pathname.replace(BASE, "");
  if (path.startsWith("/")) path = path.slice(1);
  if (path.endsWith("/")) path = path.slice(0, -1);
  return path || "";
}

function setActiveLink(pathKey) {
  document.querySelectorAll('nav a[data-link]').forEach(a => {
    const key = pathToKey(new URL(a.href).pathname);
    a.removeAttribute("aria-current");
    if (key === pathKey) a.setAttribute("aria-current", "page");
  });
}

function updateMeta({ title, description }) {
  if (title) document.title = title;
  if (description) {
    let m = document.querySelector('meta[name="description"]');
    if (m) m.setAttribute("content", description);
  }
  const ogTitle = document.querySelector('meta[property="og:title"]');
  const ogDesc = document.querySelector('meta[property="og:description"]');
  if (ogTitle && title) ogTitle.setAttribute("content", title);
  if (ogDesc && description) ogDesc.setAttribute("content", description);
}

function renderRoute() {
  const key = pathToKey(location.pathname);
  const route = routes[key] || routes[""];
  document.getElementById("app").innerHTML = route.html;
  updateMeta(route);
  setActiveLink(key);
  document.getElementById("app").focus();
}

document.addEventListener("click", (e) => {
  const link = e.target.closest('a[data-link]');
  if (!link) return;
  const url = new URL(link.href);
  if (url.origin !== location.origin) return;
  e.preventDefault();
  history.pushState({}, "", url.pathname);
  renderRoute();
});

window.addEventListener("popstate", renderRoute);

// Theme handling
const themeToggle = document.getElementById("themeToggle");
const THEME_KEY = "theme";
const root = document.documentElement;

function applyTheme() {
  const saved = localStorage.getItem(THEME_KEY) || "system";
  root.dataset.theme = saved;
  if (saved === "light") {
    root.classList.add("light");
  } else if (saved === "dark") {
    root.classList.remove("light");
  } else {
    const mql = window.matchMedia("(prefers-color-scheme: light)");
    root.classList.toggle("light", mql.matches);
  }
}

themeToggle?.addEventListener("click", () => {
  const current = localStorage.getItem(THEME_KEY) || "system";
  const next = current === "system" ? "dark" : current === "dark" ? "light" : "system";
  localStorage.setItem(THEME_KEY, next);
  applyTheme();
});

applyTheme();
document.getElementById("year").textContent = new Date().getFullYear();
renderRoute();
